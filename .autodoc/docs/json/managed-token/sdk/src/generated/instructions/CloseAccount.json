{
  "fileName": "CloseAccount.ts",
  "filePath": "managed-token/sdk/src/generated/instructions/CloseAccount.ts",
  "url": "https://github.com/solana-labs/solana-program-library/managed-token/sdk/src/generated/instructions/CloseAccount.ts",
  "summary": "This code is a part of the Solana Program Library and provides functionality for creating a CloseAccount instruction in the Solana blockchain. The CloseAccount instruction is used to close an account and transfer its remaining balance to a specified destination account.\n\nThe code defines a `CloseAccountStruct` using the `BeetArgsStruct` from the `@metaplex-foundation/beet` package. This structure contains a single field, `instructionDiscriminator`, which is a number used to identify the instruction type.\n\nThe `CloseAccountInstructionAccounts` type is defined to represent the accounts required by the CloseAccount instruction. It includes the following properties:\n\n- `account`: The account to be closed.\n- `destination`: The account to receive the remaining balance.\n- `mint`: The mint associated with the account.\n- `owner`: The owner of the account, who must be a signer.\n- `upstreamAuthority`: The upstream authority of the account, who must also be a signer.\n- `freezeAuthority`: The freeze authority of the account.\n- `tokenProgram`: The token program ID, which defaults to the SPL Token program ID.\n\nThe `createCloseAccountInstruction` function is provided to create a CloseAccount instruction. It takes an object of type `CloseAccountInstructionAccounts` as input, along with an optional `programId` which defaults to a specific public key. The function serializes the `CloseAccountStruct`, creates an array of `AccountMeta` objects for each account, and constructs a new `TransactionInstruction` with the provided `programId`, `keys`, and `data`.\n\nExample usage:\n\n```javascript\nimport { createCloseAccountInstruction } from './closeAccount';\n\nconst accounts = {\n  account: new web3.PublicKey('accountPublicKey'),\n  destination: new web3.PublicKey('destinationPublicKey'),\n  mint: new web3.PublicKey('mintPublicKey'),\n  owner: new web3.PublicKey('ownerPublicKey'),\n  upstreamAuthority: new web3.PublicKey('upstreamAuthorityPublicKey'),\n  freezeAuthority: new web3.PublicKey('freezeAuthorityPublicKey'),\n};\n\nconst closeAccountInstruction = createCloseAccountInstruction(accounts);\n```\n\nIn summary, this code provides a convenient way to create a CloseAccount instruction for the Solana blockchain, which can be used in the larger project to manage account closures and balance transfers.",
  "questions": "1. **What is the purpose of the `CloseAccountStruct`?**\n\n   The `CloseAccountStruct` is a BeetArgsStruct that defines the structure of the arguments required for the CloseAccount instruction. It contains a single property `instructionDiscriminator` of type `number`.\n\n2. **What are the required accounts for the _CloseAccount_ instruction?**\n\n   The required accounts for the _CloseAccount_ instruction are `account`, `destination`, `mint`, `owner`, `upstreamAuthority`, `freezeAuthority`, and an optional `tokenProgram`. These accounts are defined in the `CloseAccountInstructionAccounts` type.\n\n3. **How is the _CloseAccount_ instruction created?**\n\n   The _CloseAccount_ instruction is created using the `createCloseAccountInstruction` function, which takes an object of type `CloseAccountInstructionAccounts` as its argument, and an optional `programId`. The function serializes the `CloseAccountStruct`, sets up the `keys` array with the required `AccountMeta` objects, and creates a new `TransactionInstruction` with the provided `programId`, `keys`, and `data`."
}