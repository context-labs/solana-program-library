{
  "fileName": "instructions.ts",
  "filePath": "token/js/src/extensions/cpiGuard/instructions.ts",
  "url": "https://github.com/solana-labs/solana-program-library/token/js/src/extensions/cpiGuard/instructions.ts",
  "summary": "This code provides functionality to enable or disable the Cross-Program Invocation (CPI) Guard for a token account in the Solana Program Library. The CPI Guard is a security feature that prevents unauthorized access to a token account by other programs.\n\nThe code exports two main functions: `createEnableCpiGuardInstruction` and `createDisableCpiGuardInstruction`. Both functions take the following parameters:\n\n- `account`: The token account to update.\n- `authority`: The account's owner/delegate.\n- `multiSigners`: An optional array of signer accounts (default is an empty array).\n- `programId`: The SPL Token program account (default is `TOKEN_2022_PROGRAM_ID`).\n\nThese functions return a `TransactionInstruction` that can be added to a transaction to enable or disable the CPI Guard for the specified token account.\n\nInternally, both functions call the `createCpiGuardInstruction` function, which takes the same parameters along with an additional `cpiGuardInstruction` parameter. This parameter is an enum value of either `CpiGuardInstruction.Enable` or `CpiGuardInstruction.Disable`, depending on whether the CPI Guard should be enabled or disabled.\n\nThe `createCpiGuardInstruction` function first checks if the program supports extensions using the `programSupportsExtensions` function. If not, it throws a `TokenUnsupportedInstructionError`. Then, it adds the signers to the keys array using the `addSigners` function. Finally, it encodes the instruction data using the `cpiGuardInstructionData` struct and creates a new `TransactionInstruction` with the keys, programId, and data.\n\nHere's an example of how to use the exported functions:\n\n```javascript\nimport { createEnableCpiGuardInstruction, createDisableCpiGuardInstruction } from './path/to/cpi-guard';\n\n// Enable CPI Guard for a token account\nconst enableCpiGuardInstruction = createEnableCpiGuardInstruction(account, authority, multiSigners);\n\n// Disable CPI Guard for a token account\nconst disableCpiGuardInstruction = createDisableCpiGuardInstruction(account, authority, multiSigners);\n```\n\nIn summary, this code provides a way to enable or disable the CPI Guard for a token account in the Solana Program Library, enhancing the security of token accounts by preventing unauthorized access from other programs.",
  "questions": "1. **Question**: What is the purpose of the `CpiGuardInstruction` enum and its values `Enable` and `Disable`?\n   **Answer**: The `CpiGuardInstruction` enum is used to represent the two possible instructions for the Cross-Program Invocation (CPI) Guard: enabling or disabling it. These values are used when constructing the `createEnableCpiGuardInstruction` and `createDisableCpiGuardInstruction` functions.\n\n2. **Question**: What are the `createEnableCpiGuardInstruction` and `createDisableCpiGuardInstruction` functions used for?\n   **Answer**: These functions are used to create `TransactionInstruction` objects for enabling and disabling the CPI Guard on a token account. They take in parameters such as the token account, authority, signers, and program ID, and return a `TransactionInstruction` that can be added to a transaction.\n\n3. **Question**: What is the purpose of the `programSupportsExtensions` function and why is it used in the `createCpiGuardInstruction` function?\n   **Answer**: The `programSupportsExtensions` function is used to check if the given program ID supports extensions, such as the CPI Guard. It is used in the `createCpiGuardInstruction` function to ensure that the program ID provided supports the CPI Guard extension before creating a `TransactionInstruction` for it. If the program does not support extensions, a `TokenUnsupportedInstructionError` is thrown."
}