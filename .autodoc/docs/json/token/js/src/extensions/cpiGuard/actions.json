{
  "fileName": "actions.ts",
  "filePath": "token/js/src/extensions/cpiGuard/actions.ts",
  "url": "https://github.com/solana-labs/solana-program-library/token/js/src/extensions/cpiGuard/actions.ts",
  "summary": "This code provides two functions, `enableCpiGuard` and `disableCpiGuard`, which are used to enable and disable the Cross-Program Invocation (CPI) Guard on a given account in the Solana Program Library. The CPI Guard is a security feature that prevents unauthorized cross-program invocations on an account.\n\nBoth functions have similar parameters:\n\n- `connection`: Connection to the Solana network.\n- `payer`: The account responsible for paying transaction fees.\n- `account`: The account to modify (enable or disable CPI Guard).\n- `owner`: The owner of the account.\n- `multiSigners`: An array of signing accounts if the `owner` is a multisig account.\n- `confirmOptions`: Options for confirming the transaction.\n- `programId`: The SPL Token program account (defaults to `TOKEN_2022_PROGRAM_ID`).\n\nThe functions work as follows:\n\n1. They call the `getSigners` function to obtain the owner's public key and an array of signers.\n2. They create a new transaction and add either the `createEnableCpiGuardInstruction` or `createDisableCpiGuardInstruction` instruction, depending on the function being called.\n3. They send and confirm the transaction using the `sendAndConfirmTransaction` function, passing the connection, transaction, payer, and signers.\n\nHere's an example of how to enable the CPI Guard on an account:\n\n```javascript\nimport { enableCpiGuard } from './path/to/this/file';\n\nconst connection = new Connection('https://api.mainnet-beta.solana.com');\nconst payer = new Account();\nconst account = new PublicKey('accountPublicKey');\nconst owner = new PublicKey('ownerPublicKey');\n\nconst transactionSignature = await enableCpiGuard(connection, payer, account, owner);\nconsole.log('CPI Guard enabled, transaction signature:', transactionSignature);\n```\n\nAnd to disable the CPI Guard:\n\n```javascript\nimport { disableCpiGuard } from './path/to/this/file';\n\nconst connection = new Connection('https://api.mainnet-beta.solana.com');\nconst payer = new Account();\nconst account = new PublicKey('accountPublicKey');\nconst owner = new PublicKey('ownerPublicKey');\n\nconst transactionSignature = await disableCpiGuard(connection, payer, account, owner);\nconsole.log('CPI Guard disabled, transaction signature:', transactionSignature);\n```\n\nThese functions are part of a larger project that interacts with the Solana blockchain and can be used to enhance the security of accounts by enabling or disabling the CPI Guard as needed.",
  "questions": "1. **What is the purpose of the `enableCpiGuard` and `disableCpiGuard` functions?**\n\n   The `enableCpiGuard` function is used to enable the CPI Guard on a given account, while the `disableCpiGuard` function is used to disable the CPI Guard on a given account.\n\n2. **What is the role of the `TOKEN_2022_PROGRAM_ID` constant in this code?**\n\n   The `TOKEN_2022_PROGRAM_ID` constant represents the SPL Token program account and is used as the default value for the `programId` parameter in both `enableCpiGuard` and `disableCpiGuard` functions.\n\n3. **What is the purpose of the `getSigners` function and how is it used in this code?**\n\n   The `getSigners` function is used to get the owner's public key and the list of signing accounts for a given owner and multisigners. It is used in both `enableCpiGuard` and `disableCpiGuard` functions to obtain the required signers for creating and sending the transaction."
}