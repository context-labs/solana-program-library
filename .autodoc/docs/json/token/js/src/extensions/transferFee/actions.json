{
  "fileName": "actions.ts",
  "filePath": "token/js/src/extensions/transferFee/actions.ts",
  "url": "https://github.com/solana-labs/solana-program-library/token/js/src/extensions/transferFee/actions.ts",
  "summary": "This code provides utility functions for transferring tokens and managing withheld tokens in the Solana Program Library (SPL). It imports necessary types and functions from the `@solana/web3.js` package and other internal modules.\n\nThe `transferCheckedWithFee` function transfers tokens from a source account to a destination account, asserting the transfer fee, token mint, and decimals. It takes parameters such as the connection, payer, source, mint, destination, owner, amount, decimals, fee, and optional multisigners. It creates a transaction using the `createTransferCheckedWithFeeInstruction` function and sends it using `sendAndConfirmTransaction`. The function returns the signature of the confirmed transaction.\n\nExample usage:\n\n```javascript\nconst transferSignature = await transferCheckedWithFee(\n  connection,\n  payer,\n  source,\n  mint,\n  destination,\n  owner,\n  amount,\n  decimals,\n  fee,\n  multiSigners\n);\n```\n\nThe `withdrawWithheldTokensFromMint` and `withdrawWithheldTokensFromAccounts` functions allow withdrawing withheld tokens from a mint or accounts, respectively. Both functions take similar parameters, such as connection, payer, mint, destination, authority, and optional multisigners. They create transactions using the respective instruction functions and send them using `sendAndConfirmTransaction`. Both functions return the signature of the confirmed transaction.\n\nExample usage:\n\n```javascript\nconst withdrawSignature = await withdrawWithheldTokensFromMint(\n  connection,\n  payer,\n  mint,\n  destination,\n  authority,\n  multiSigners\n);\n```\n\nThe `harvestWithheldTokensToMint` function allows harvesting withheld tokens from accounts to the mint. It takes parameters such as connection, payer, mint, sources, and optional confirm options. It creates a transaction using the `createHarvestWithheldTokensToMintInstruction` function and sends it using `sendAndConfirmTransaction`. The function returns the signature of the confirmed transaction.\n\nExample usage:\n\n```javascript\nconst harvestSignature = await harvestWithheldTokensToMint(\n  connection,\n  payer,\n  mint,\n  sources\n);\n```\n\nThese utility functions can be used in the larger project for token transfers and managing withheld tokens in SPL.",
  "questions": "1. **Question**: What is the purpose of the `transferCheckedWithFee` function and what are its parameters?\n   **Answer**: The `transferCheckedWithFee` function is used to transfer tokens from one account to another while asserting the transfer fee, token mint, and decimals. Its parameters include the connection, payer, source account, mint, destination account, owner of the source account, amount to transfer, decimals, fee, multiSigners (if the owner is a multisig), confirmOptions, and an optional programId.\n\n2. **Question**: How does the `withdrawWithheldTokensFromMint` function work and what are its parameters?\n   **Answer**: The `withdrawWithheldTokensFromMint` function is used to withdraw withheld tokens from a mint to a destination account. Its parameters include the connection, payer, mint, destination account, authority (the mint's withdraw withheld tokens authority), multiSigners (if the owner is a multisig), confirmOptions, and an optional programId.\n\n3. **Question**: What does the `harvestWithheldTokensToMint` function do and what are its parameters?\n   **Answer**: The `harvestWithheldTokensToMint` function is used to harvest withheld tokens from accounts and send them to the mint. Its parameters include the connection, payer, mint, source accounts from which to withdraw withheld fees, confirmOptions, and an optional programId."
}