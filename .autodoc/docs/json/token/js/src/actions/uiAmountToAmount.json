{
  "fileName": "uiAmountToAmount.ts",
  "filePath": "token/js/src/actions/uiAmountToAmount.ts",
  "url": "https://github.com/solana-labs/solana-program-library/token/js/src/actions/uiAmountToAmount.ts",
  "summary": "The code provided is a utility function for the Solana Program Library (SPL) that converts a user-friendly token amount (Ui Amount) to the actual token amount (Amount) using the mint-prescribed decimals. This is useful when dealing with tokens that have different decimal representations, as it allows users to interact with tokens in a more intuitive way.\n\nThe `uiAmountToAmount` function takes five parameters:\n\n1. `connection`: A Connection object to interact with the Solana network.\n2. `payer`: A Signer object representing the payer of the transaction fees.\n3. `mint`: A PublicKey object representing the mint for the token account.\n4. `amount`: A string representing the Ui Amount of tokens to be converted to Amount.\n5. `programId`: An optional parameter representing the SPL Token program account, which defaults to `TOKEN_PROGRAM_ID`.\n\nThe function creates a new `Transaction` object and adds an instruction to it using the `createUiAmountToAmountInstruction` function. This instruction takes the `mint`, `amount`, and `programId` as parameters. The transaction is then simulated using the `connection.simulateTransaction` method, which returns the result of the simulation.\n\nIf the simulation is successful and returns data, the function decodes the data using the `u64` utility from the `@solana/buffer-layout-utils` package and returns the decoded Amount as a `bigint`. If there is an error during the simulation, the function returns the `TransactionError` object. If the simulation does not return any data, the function returns `null`.\n\nHere's an example of how to use the `uiAmountToAmount` function:\n\n```javascript\nimport { Connection, Keypair } from '@solana/web3.js';\nimport { uiAmountToAmount } from './path/to/this/file';\n\n(async () => {\n  const connection = new Connection('https://api.mainnet-beta.solana.com');\n  const payer = Keypair.generate();\n  const mint = new PublicKey('TOKEN_MINT_ADDRESS');\n  const uiAmount = '100.123456';\n\n  const amount = await uiAmountToAmount(connection, payer, mint, uiAmount);\n  console.log('Amount:', amount);\n})();\n```\n\nThis example connects to the Solana mainnet, generates a random payer keypair, and converts a Ui Amount of 100.123456 tokens to the corresponding Amount using the provided mint address.",
  "questions": "1. **Question:** What is the purpose of the `uiAmountToAmount` function?\n   **Answer:** The `uiAmountToAmount` function is used to convert a UI amount of tokens (represented as a string) to an actual amount using the mint-prescribed decimals.\n\n2. **Question:** What are the input parameters for the `uiAmountToAmount` function?\n   **Answer:** The input parameters for the `uiAmountToAmount` function are `connection`, `payer`, `mint`, `amount`, and an optional `programId` with a default value of `TOKEN_PROGRAM_ID`.\n\n3. **Question:** What is the return type of the `uiAmountToAmount` function?\n   **Answer:** The `uiAmountToAmount` function returns a `Promise` that resolves to either a `bigint`, a `TransactionError`, or `null`."
}