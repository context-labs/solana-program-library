{
  "fileName": "syncNative.ts",
  "filePath": "token/js/src/actions/syncNative.ts",
  "url": "https://github.com/solana-labs/solana-program-library/token/js/src/actions/syncNative.ts",
  "summary": "The code in this file is responsible for synchronizing the balance of a native SPL (Solana Program Library) token account with the underlying system account's lamports. Lamports are the smallest unit of the native SOL cryptocurrency on the Solana blockchain. This synchronization is essential to ensure that the token balances are accurately represented and up-to-date.\n\nThe main function exported by this file is `syncNative`, which takes the following parameters:\n\n- `connection`: A Connection object to interact with the Solana blockchain.\n- `payer`: A Signer object representing the payer of the transaction fees.\n- `account`: A PublicKey object representing the native SPL token account to be synced.\n- `confirmOptions` (optional): Options for confirming the transaction.\n- `programId` (optional, default is `TOKEN_PROGRAM_ID`): The SPL Token program account.\n\nThe `syncNative` function creates a new `Transaction` object and adds a `createSyncNativeInstruction` to it. The `createSyncNativeInstruction` function is imported from the `../instructions/syncNative.js` file and is responsible for generating the appropriate instruction to sync the native SPL token account with the system account's lamports.\n\nAfter adding the instruction to the transaction, the `sendAndConfirmTransaction` function is called with the `connection`, `transaction`, and `payer` as arguments, along with the optional `confirmOptions`. This function sends the transaction to the Solana blockchain and confirms it, returning the signature of the confirmed transaction as a `Promise<TransactionSignature>`.\n\nIn the larger project, this code can be used to ensure that native SPL token accounts are accurately reflecting the correct balance of the underlying system account's lamports. This is particularly useful when dealing with token transfers, swaps, or other operations that may affect the balance of a token account. For example:\n\n```javascript\nimport { syncNative } from './path/to/this/file';\nimport { Connection, Keypair } from '@solana/web3.js';\n\nconst connection = new Connection('https://api.mainnet-beta.solana.com');\nconst payer = Keypair.fromSecretKey(/* ... */);\nconst account = new PublicKey('someNativeTokenAccountPublicKey');\n\nsyncNative(connection, payer, account)\n  .then((transactionSignature) => {\n    console.log('Synced native SPL token account, transaction signature:', transactionSignature);\n  })\n  .catch((error) => {\n    console.error('Error syncing native SPL token account:', error);\n  });\n```\n\nThis example demonstrates how to use the `syncNative` function to sync a native SPL token account's balance with the underlying system account's lamports.",
  "questions": "1. **Question:** What is the purpose of the `syncNative` function?\n   **Answer:** The `syncNative` function is used to sync the balance of a native SPL token account to the underlying system account's lamports.\n\n2. **Question:** What are the input parameters for the `syncNative` function?\n   **Answer:** The input parameters for the `syncNative` function are `connection`, `payer`, `account`, `confirmOptions`, and an optional `programId` with a default value of `TOKEN_PROGRAM_ID`.\n\n3. **Question:** What does the `syncNative` function return?\n   **Answer:** The `syncNative` function returns a `Promise` that resolves to the signature of the confirmed transaction (`TransactionSignature`)."
}