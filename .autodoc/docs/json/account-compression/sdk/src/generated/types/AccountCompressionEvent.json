{
  "fileName": "AccountCompressionEvent.ts",
  "filePath": "account-compression/sdk/src/generated/types/AccountCompressionEvent.ts",
  "url": "https://github.com/solana-labs/solana-program-library/account-compression/sdk/src/generated/types/AccountCompressionEvent.ts",
  "summary": "This code is part of the Solana Program Library and is responsible for handling Account Compression Events. It is generated using the `solita` package, which is a code generation tool for Solana programs. The code should not be edited directly, but rather updated using `solita` or by writing a wrapper to add functionality.\n\nThe main purpose of this code is to define the `AccountCompressionEvent` type, which is a union type representing the data enum defined in Rust. It is derived from the `AccountCompressionEventRecord` type, which contains two fields: `ChangeLog` and `ApplicationData`. Each field is associated with a specific event type: `ChangeLogEvent` and `ApplicationDataEvent`.\n\nThe `AccountCompressionEvent` type includes a `__kind` property, which allows narrowing types in switch/if statements. Additionally, two type guards are provided: `isAccountCompressionEventChangeLog` and `isAccountCompressionEventApplicationData`. These type guards can be used to narrow down the specific variant of the `AccountCompressionEvent`.\n\nThe `accountCompressionEventBeet` constant is an instance of `beet.FixableBeet<AccountCompressionEvent>`, which is used for de/serialization of the `AccountCompressionEvent` type. It is created using the `beet.dataEnum` function, which takes an array of tuples containing the variant name and a `beet.FixableBeetArgsStruct` instance for each variant.\n\nHere's an example of how to use the `AccountCompressionEvent` type and the type guards:\n\n```javascript\nimport {\n  AccountCompressionEvent,\n  isAccountCompressionEventChangeLog,\n  isAccountCompressionEventApplicationData,\n} from './AccountCompressionEvent';\n\nfunction handleAccountCompressionEvent(event: AccountCompressionEvent) {\n  if (isAccountCompressionEventChangeLog(event)) {\n    // Handle ChangeLog event\n  } else if (isAccountCompressionEventApplicationData(event)) {\n    // Handle ApplicationData event\n  }\n}\n```\n\nIn summary, this code provides a way to handle Account Compression Events in the Solana Program Library, allowing developers to work with different event types and perform type narrowing using the provided type guards.",
  "questions": "1. **What is the purpose of the `AccountCompressionEventRecord` type?**\n\n   The `AccountCompressionEventRecord` type is used to derive the `AccountCompressionEvent` type as well as the de/serializer. It is marked as private and should not be referred to directly in the code.\n\n2. **What is the `AccountCompressionEvent` type and how is it generated?**\n\n   The `AccountCompressionEvent` type is a union type representing the AccountCompressionEvent data enum defined in Rust. It is generated using the `beet.DataEnumKeyAsKind<AccountCompressionEventRecord>` function.\n\n3. **What are the `isAccountCompressionEventChangeLog` and `isAccountCompressionEventApplicationData` functions used for?**\n\n   These functions are type guards that help to narrow down the type of an `AccountCompressionEvent` object to a specific variant, either 'ChangeLog' or 'ApplicationData', by checking the `__kind` property of the object."
}