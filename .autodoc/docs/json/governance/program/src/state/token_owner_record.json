{
  "fileName": "token_owner_record.rs",
  "filePath": "governance/program/src/state/token_owner_record.rs",
  "url": "https://github.com/solana-labs/solana-program-library/governance/program/src/state/token_owner_record.rs",
  "summary": "The `TokenOwnerRecordV2` struct represents a Governance Token Owner Record account in the Solana Program Library. It stores information about the token owner's participation in governance, such as the deposited governing tokens, the number of unrelinquished votes, and the number of outstanding proposals. The struct also includes methods to perform various checks and actions related to governance.\n\nThe `resolve_voter_weight` method calculates the voter's weight based on either the deposited tokens or the weight provided by a voter weight add-in, if configured. This weight is used when voting on proposals or creating new proposals and governances.\n\nThe `assert_can_create_proposal` method checks if the token owner has enough tokens and no outstanding proposals to create a new proposal. Similarly, the `assert_can_create_governance` method checks if the token owner has enough tokens to create a new governance.\n\nThe `assert_can_withdraw_governing_tokens` method ensures that the token owner can withdraw their governing tokens only if they have no unrelinquished votes and no outstanding proposals.\n\nThe `assert_token_owner_or_delegate_is_signer` method checks if the provided Governance Authority signed the transaction, ensuring that only the token owner or their delegate can perform certain actions.\n\nThe module also includes functions to deserialize and fetch `TokenOwnerRecordV2` data from an account, check its PDA against provided seeds, and assert that it belongs to a given realm or governing mint.\n\nExample usage:\n\n```rust\nlet token_owner_record_data = get_token_owner_record_data(program_id, token_owner_record_info)?;\ntoken_owner_record_data.assert_can_create_proposal(realm_data, config, voter_weight)?;\n```\n\nThis code fetches the `TokenOwnerRecordV2` data from the `token_owner_record_info` account and checks if the token owner can create a proposal based on the `realm_data`, `config`, and `voter_weight`.",
  "questions": "1. **Question**: What is the purpose of the `TokenOwnerRecordV2` struct and how is it used in the code?\n   **Answer**: The `TokenOwnerRecordV2` struct represents a Governance Token Owner Record account. It stores information about the token owner, the amount of governing tokens deposited into the Realm, the number of unrelinquished votes, and other related data. It is used throughout the code to manage and manipulate token owner records, such as checking if a token owner can create a proposal or withdraw tokens from the Realm.\n\n2. **Question**: How does the code handle backward compatibility with previous versions of the `TokenOwnerRecord` account?\n   **Answer**: The code handles backward compatibility by checking the `account_type` and `version` fields of the deserialized account. If the account is of type `TokenOwnerRecordV1`, it translates the account data to the `TokenOwnerRecordV2` format. If the deserialized account uses an old account layout, it migrates the data to the latest version by updating the `version` field and adjusting other fields accordingly.\n\n3. **Question**: How does the `resolve_voter_weight` function work and when is it used?\n   **Answer**: The `resolve_voter_weight` function is used to determine the voter's weight based on either the amount of governing tokens deposited into the Realm or the weight provided by a voter weight addin (if configured). It checks if the Realm is configured to use a voter weight plugin for the governing token mint and, if so, uses the externally provided voter weight instead of the governing token deposit amount. This function is used when checking if a token owner has enough tokens to create a proposal or governance."
}