{
  "fileName": "cross-program-invocation.c",
  "filePath": "examples/c/src/cross-program-invocation/cross-program-invocation.c",
  "url": "https://github.com/solana-labs/solana-program-library/examples/c/src/cross-program-invocation/cross-program-invocation.c",
  "summary": "The code demonstrates cross-program invocations in the Solana Program Library. It defines a program that allocates a specified amount of bytes (42 bytes) to an account using the Solana System Program. The program is designed to be invoked by other programs on the Solana blockchain.\n\nThe `do_invoke` function is the core of this program. It takes a `SolParameters` struct as input, which contains information about the accounts involved in the transaction. The function first checks if there are exactly two accounts provided: the system program's executable account and the account to allocate the bytes to. If not, it returns an error.\n\nNext, the function creates a program address using the provided seed and the program's ID. It then checks if the expected allocated key matches the actual allocated key. If not, it returns an error.\n\nThe function then constructs a `SolInstruction` struct to call the Allocate instruction of the Solana System Program. The instruction is set up with the necessary account metadata, data payload (containing the Allocate instruction enum value and the size to allocate), and the system program's public key.\n\nFinally, the `sol_invoke_signed` function is called to execute the instruction. This function takes the constructed `SolInstruction`, the accounts involved, and the signer seeds as input. It returns the result of the invocation.\n\nThe `entrypoint` function serves as the entry point for the program. It deserializes the input data into a `SolParameters` struct and calls the `do_invoke` function with the deserialized parameters.\n\nThis program can be used in the larger Solana project to demonstrate how to interact with the System Program for allocating account data and how to perform cross-program invocations.",
  "questions": "1. **Question**: What is the purpose of the `SIZE` macro and how is it used in the code?\n   **Answer**: The `SIZE` macro is defined as 42 and represents the amount of bytes of account data to allocate. It is used in the `do_invoke` function when creating the Allocate instruction, setting the size to allocate in the data array.\n\n2. **Question**: What is the purpose of the `seed` array and how is it used in the code?\n   **Answer**: The `seed` array is an array of characters that serves as a seed for creating a program address. It is used in the `do_invoke` function when creating the `SolSignerSeed` and `SolSignerSeeds` structures, which are then used to create the expected allocated key using `sol_create_program_address`.\n\n3. **Question**: What are the different System program instruction enum values and how are they used in the code?\n   **Answer**: The System program instruction enum values represent different instructions that can be executed by the system program. In this code, the Allocate instruction (enum value 8) is used to allocate account data. The enum value is stored in the `data` array, which is then used to create a `SolInstruction` structure for invoking the instruction."
}