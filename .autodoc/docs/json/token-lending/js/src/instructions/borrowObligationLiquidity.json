{
  "fileName": "borrowObligationLiquidity.ts",
  "filePath": "token-lending/js/src/instructions/borrowObligationLiquidity.ts",
  "url": "https://github.com/solana-labs/solana-program-library/token-lending/js/src/instructions/borrowObligationLiquidity.ts",
  "summary": "The code provided is part of the Solana Program Library and defines a function `borrowObligationLiquidityInstruction` that creates a `TransactionInstruction` for borrowing liquidity from a lending market on the Solana blockchain. This function is used to generate instructions for smart contracts that interact with the Solana lending protocol.\n\nThe `borrowObligationLiquidityInstruction` function takes several parameters:\n\n- `liquidityAmount`: The amount of liquidity to borrow.\n- `sourceLiquidity`, `destinationLiquidity`: The public keys of the source and destination accounts for the borrowed liquidity.\n- `borrowReserve`, `borrowReserveLiquidityFeeReceiver`: The public keys of the reserve account and the fee receiver account for the borrowed liquidity.\n- `obligation`, `lendingMarket`, `lendingMarketAuthority`: The public keys of the borrower's obligation account, the lending market account, and the lending market authority account.\n- `obligationOwner`: The public key of the borrower's account, which must sign the transaction.\n- `hostFeeReceiver` (optional): The public key of the account that receives the host fee.\n\nThe function first creates a `Data` object containing the instruction code and the liquidity amount to borrow. It then encodes this object using the `DataLayout` struct, which is a buffer layout for the `Data` object.\n\nNext, the function creates an array of key-value pairs representing the public keys and their respective roles (signer or writable) in the transaction. If a `hostFeeReceiver` is provided, it is added to the array as well.\n\nFinally, the function creates and returns a new `TransactionInstruction` object with the encoded data, the array of keys, and the lending program ID.\n\nHere's an example of how to use the `borrowObligationLiquidityInstruction` function:\n\n```javascript\nconst instruction = borrowObligationLiquidityInstruction(\n    1000n,\n    sourceLiquidityPublicKey,\n    destinationLiquidityPublicKey,\n    borrowReservePublicKey,\n    borrowReserveLiquidityFeeReceiverPublicKey,\n    obligationPublicKey,\n    lendingMarketPublicKey,\n    lendingMarketAuthorityPublicKey,\n    obligationOwnerPublicKey,\n    hostFeeReceiverPublicKey\n);\n```\n\nThis example creates a transaction instruction to borrow 1000 units of liquidity from the specified lending market and accounts.",
  "questions": "1. **Question**: What is the purpose of the `borrowObligationLiquidityInstruction` function?\n   **Answer**: The `borrowObligationLiquidityInstruction` function is used to create a transaction instruction for borrowing liquidity from a lending market in the Solana Program Library.\n\n2. **Question**: What are the parameters required for the `borrowObligationLiquidityInstruction` function?\n   **Answer**: The function requires the following parameters: `liquidityAmount`, `sourceLiquidity`, `destinationLiquidity`, `borrowReserve`, `borrowReserveLiquidityFeeReceiver`, `obligation`, `lendingMarket`, `lendingMarketAuthority`, `obligationOwner`, and an optional `hostFeeReceiver`.\n\n3. **Question**: How is the `DataLayout` used in the `borrowObligationLiquidityInstruction` function?\n   **Answer**: The `DataLayout` is used to encode the instruction data, which includes the `LendingInstruction.BorrowObligationLiquidity` and the `liquidityAmount`, into a buffer that will be included in the transaction instruction."
}