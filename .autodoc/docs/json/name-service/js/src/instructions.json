{
  "fileName": "instructions.ts",
  "filePath": "name-service/js/src/instructions.ts",
  "url": "https://github.com/solana-labs/solana-program-library/name-service/js/src/instructions.ts",
  "summary": "This code provides a set of functions to create and manipulate transaction instructions for the Solana Program Library's name service. The name service allows users to register and manage human-readable names on the Solana blockchain. The functions in this code are used to create, update, transfer, delete, and reallocate name accounts.\n\n1. `createInstruction`: This function creates a transaction instruction to register a new name account. It takes parameters such as the program ID, system program ID, name key, name owner key, payer key, hashed name, lamports, space, and optional name class key, name parent, and name parent owner. It constructs the data buffer and keys array, and returns a new `TransactionInstruction` object.\n\n   Example usage:\n   ```\n   const createTxInstruction = createInstruction(\n     nameProgramId, systemProgramId, nameKey, nameOwnerKey, payerKey, hashed_name, lamports, space, nameClassKey, nameParent, nameParentOwner\n   );\n   ```\n\n2. `updateInstruction`: This function creates a transaction instruction to update an existing name account. It takes parameters such as the program ID, name account key, offset, input data, name update signer, and optional parent name key. It constructs the data buffer and keys array, and returns a new `TransactionInstruction` object.\n\n   Example usage:\n   ```\n   const updateTxInstruction = updateInstruction(\n     nameProgramId, nameAccountKey, offset, input_data, nameUpdateSigner, parentNameKey\n   );\n   ```\n\n3. `transferInstruction`: This function creates a transaction instruction to transfer the ownership of a name account. It takes parameters such as the program ID, name account key, new owner key, current name owner key, and optional name class key and name parent. It constructs the data buffer and keys array, and returns a new `TransactionInstruction` object.\n\n   Example usage:\n   ```\n   const transferTxInstruction = transferInstruction(\n     nameProgramId, nameAccountKey, newOwnerKey, currentNameOwnerKey, nameClassKey, nameParent\n   );\n   ```\n\n4. `deleteInstruction`: This function creates a transaction instruction to delete a name account. It takes parameters such as the program ID, name account key, refund target key, and name owner key. It constructs the data buffer and keys array, and returns a new `TransactionInstruction` object.\n\n   Example usage:\n   ```\n   const deleteTxInstruction = deleteInstruction(\n     nameProgramId, nameAccountKey, refundTargetKey, nameOwnerKey\n   );\n   ```\n\n5. `reallocInstruction`: This function creates a transaction instruction to reallocate space for a name account. It takes parameters such as the program ID, system program ID, payer key, name account key, name owner key, and space. It constructs the data buffer and keys array, and returns a new `TransactionInstruction` object.\n\n   Example usage:\n   ```\n   const reallocTxInstruction = reallocInstruction(\n     nameProgramId, systemProgramId, payerKey, nameAccountKey, nameOwnerKey, space\n   );\n   ```",
  "questions": "1. **What is the purpose of the `createInstruction` function?**\n\n   The `createInstruction` function is used to create a new transaction instruction for the Solana program library. It takes various input parameters such as public keys, hashed name, lamports, space, and optional name class and parent keys, and returns a new `TransactionInstruction` object with the specified keys, program ID, and data.\n\n2. **What are the different types of instructions that can be created using the functions in this file?**\n\n   There are five types of instructions that can be created using the functions in this file: create, update, transfer, delete, and realloc. Each function corresponds to a specific action that can be performed on a Solana program, such as creating a new account, updating an existing account, transferring ownership, deleting an account, or reallocating space for an account.\n\n3. **How are optional parameters like `nameClassKey`, `nameParent`, and `nameParentOwner` handled in the `createInstruction` function?**\n\n   In the `createInstruction` function, optional parameters like `nameClassKey`, `nameParent`, and `nameParentOwner` are checked for their existence using conditional statements. If the parameter is provided, it is added to the `keys` array with the appropriate properties. If the parameter is not provided, a new `PublicKey` with an empty buffer is added to the `keys` array instead."
}